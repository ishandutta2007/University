struct Edge{
    int y, next, c, w;
} e[500 * 500 * 2];
struct Fnode{
    int b, c; LL w;
} f[500];
LL cost, flow;
int head[500], tot, v[500];
queue <int> Q;
void Addedge(int x, int y, int c, int w){
    e[++tot].y = y; e[tot].c = c; e[tot].w = w; e[tot].next = head[x]; head[x] = tot;
    e[++tot].y = x; e[tot].c = 0; e[tot].w = -w; e[tot].next = head[y]; head[y] = tot;
}

bool Find(int S, int T){
    for (int i = 0; i <= T; i++) f[i].w = 1e18;
    f[S].w = 0, f[S].c = INF, v[S] = 1, Q.push(S);
    while (!Q.empty()){
        int x = Q.front(); Q.pop();
        for (int p = head[x]; p != -1; p = e[p].next){
            int y = e[p].y;
            if (e[p].c && e[p].w + f[x].w < f[y].w){
                f[y].b = p;
                f[y].w = e[p].w + f[x].w;
                f[y].c = min(f[x].c, e[p].c);
                if (!v[y]){
                    v[y] = 1;
                    Q.push(y);
                }
            }
        }
        v[x] = 0;
    }

    if (f[T].w == 1e18) return 0;
    cost += f[T].w * f[T].c;
    flow += f[T].c;
    int p = T;
    while (p != S){
        e[f[p].b].c -= f[T].c;
        e[f[p].b ^ 1].c += f[T].c;
        p = e[f[p].b ^ 1].y;
    }
    return 1;
}